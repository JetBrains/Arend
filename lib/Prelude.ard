\data Nat
  | zero
  | suc Nat
  \where {
    \func \infixl 6 + (x y : Nat) : Nat \elim y
      | zero => x
      | suc y => Nat.suc (x + y)

    \func \infixl 7 * (x y : Nat) : Nat \elim y
      | zero => zero
      | suc y => x * y + x

    \func \infixl 6 - (n m : Nat) : Int
      | zero, m => neg m
      | suc n, zero => pos (suc n)
      | suc n, suc m => n - m
  }

\data Int
  | pos Nat
  | neg Nat \with { zero => pos zero }
  \where {
    \use \coerce fromNat (n : Nat) => pos n
  }

\data I
  | left
  | right

\func \infix 1 = {A : \Type} (a a' : A) => Path (\lam _ => A) a a'

