\data I
  | left
  | right
  \where {
    \func squeeze (i j : I) : I
      | left, j => left
      | right, j => j
      | i, left => left
      | i, right => i

    \func squeezeR (i j : I) : I
      | left, j => j
      | right, j => right
      | i, left => i
      | i, right => right
  }

\data Path (A : I -> \Type) (a : A left) (a' : A right)
  | path (\Pi (i : I) -> A i)
  \where {
    \lemma inProp {A : \Prop} : \Pi (a a' : A) -> a = a'
  }

\func \infix 1 = {A : \Type} (a a' : A) => Path (\lam _ => A) a a'

\cons idp {A : \Type} {a : A} => path (\lam _ => a)

\func \infixl 9 @ {A : I -> \Type} {a : A left} {a' : A right} (p : Path A a a') (i : I) : A i \elim p, i
  | _, left => a
  | _, right => a'
  | path f, i => f i

\data Nat
  | zero
  | suc Nat
  \where {
    \func \infixl 6 + (x y : Nat) : Nat \elim y
      | zero => x
      | suc y => suc (x + y)

    \func \infixl 7 * (x y : Nat) : Nat \elim y
      | zero => zero
      | suc y => x * y + x

    \func \infixl 6 - (n m : Nat) : Int
      | 0, m => neg m
      | suc n, 0 => pos (suc n)
      | suc n, suc m => n - m

    \data \infix 4 <= (n m : Nat) \with
      | 0, _ => zero<=_
      | suc n, suc m => suc<=suc (n <= m)

    {- | divMod n m returns the pair (q,r) such that n = m * q + r and r < m if 0 < m.
     -   If m == 0, then divMod n m returns (n,n).
     -}
    \func divMod (n m : Nat) : \Sigma Nat Nat

    \func div (n m : Nat) => (divMod n m).1

    \func mod (n m : Nat) => (divMod n m).2

    \lemma divModProp (n m : Nat) : m * div n m + mod n m = n

    \lemma modProp (n : Nat) {m : Nat} (p : 1 <= m) : suc (mod n m) <= m
  }

\data Int
  | pos Nat
  | neg Nat \with { zero => pos zero }
  \where {
    \use \coerce fromNat (n : Nat) => pos n
  }

\func coe (A : I -> \Type) (a : A left) (i : I) : A i \elim i
  | left => a

\func coe2 (A : I -> \Type) (i : I) (a : A i) (j : I) : A j \elim i, j
  | left, j => coe A a j
  | i, right => coe (\lam k => A (I.squeezeR i k)) a right

\func iso {A B : \Type} (f : A -> B) (g : B -> A) (p : \Pi (x : A) -> g (f x) = x) (q : \Pi (y : B) -> f (g y) = y) (i : I) : \Type \elim i
  | left => A
  | right => B
