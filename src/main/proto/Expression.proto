syntax = "proto3";

package arend.compiled;
option java_package = "org.arend.module.serialization";
option java_outer_classname = "ExpressionProtos";

import "Level.proto";


message Expression {
    oneof kind {
        App app = 1;
        ClassCall class_call = 2;
        ConCall con_call = 4;
        DataCall data_call = 5;
        Error error = 6;
        FieldCall field_call = 7;
        FunCall fun_call = 8;
        Lam lam = 9;
        Let let = 10;
        Case case = 20;
        New new = 11;
        Pi pi = 13;
        Proj proj = 14;
        Reference reference = 15;
        Sigma sigma = 16;
        Tuple tuple = 17;
        Universe universe = 18;
        SmallInteger small_integer = 21;
        BigInteger big_integer = 22;
        PEval pEval = 23;
    }

    message App {
        Expression function = 1;
        Expression argument = 3;
    }
    message ClassCall {
        int32 class_ref = 1;
        Level pLevel = 2;
        Level hLevel = 4;
        map<int32, Expression> field_set = 5;
        Sort sort = 6;
        bool hasUniverses = 7;
    }
    message ConCall {
        int32 constructor_ref = 1;
        Level pLevel = 2;
        Level hLevel = 5;
        repeated Expression datatype_argument = 3;
        repeated Expression argument = 4;
    }
    message DataCall {
        int32 data_ref = 1;
        Level pLevel = 2;
        Level hLevel = 4;
        repeated Expression argument = 3;
    }
    message Error {
        Expression expression = 1;
    }
    message FieldCall {
        int32 field_ref = 1;
        Level pLevel = 2;
        Level hLevel = 4;
        Expression expression = 3;
    }
    message FunCall {
        int32 fun_ref = 1;
        Level pLevel = 2;
        Level hLevel = 4;
        repeated Expression argument = 3;
    }
    message Lam {
        Sort resultSort = 5;
        Telescope param = 3;
        Expression body = 2;
    }
    message Let {
        bool is_strict = 4;
        repeated Clause clause = 1;
        Pattern pattern = 3;
        Expression expression = 2;

        message Clause {
            string name = 1;
            Pattern pattern = 9;
            Expression expression = 8;
        }

        message Pattern {
            enum Kind {
                NAME = 0;
                TUPLE = 1;
                RECORD = 2;
            }
            Kind kind = 1;
            string name = 2;
            repeated int32 field = 3;
            repeated Pattern pattern = 4;
        }
    }
    message Case {
        bool isSFunc = 1;
        ElimTree elim_tree = 2;
        repeated Telescope param = 3;
        Expression result_type = 4;
        Expression result_type_level = 5;
        repeated Expression argument = 6;
    }
    message PEval {
        Expression expression = 1;
    }
    message New {
        ClassCall class_call = 1;
        Expression renew = 2;
    }
    message Pi {
        Sort resultSort = 8;
        Telescope param = 7;
        Expression codomain = 2;
    }
    message Proj {
        Expression expression = 1;
        int32 field = 2;
    }
    message Reference {
        int32 binding_ref = 1;
    }
    message Sigma {
        Level pLevel = 2;
        Level hLevel = 3;
        repeated Telescope param = 1;
    }
    message Tuple {
        repeated Expression field = 1;
        Sigma type = 2;
    }
    message Universe {
        Sort sort = 1;
    }
    message SmallInteger {
        int32 value = 1;
    }
    message BigInteger {
        bytes value = 1;
    }
}

message Type {
    Expression expr = 1;
    Sort sort = 2;
}

message SingleParameter {
    string name = 1;
    bool is_not_explicit = 2;
    Type type = 5;
    bool is_hidden = 6;
}

message Telescope {
    repeated string name = 1;
    bool is_not_explicit = 2;
    Type type = 5;
    bool is_hidden = 6;
}

message Binding {
    message TypedBinding {
        string name = 1;
        Type type = 4;
    }
}

message ElimTree {
    repeated Telescope param = 1;
    oneof kind {
        Leaf leaf = 2;
        Branch branch = 3;
    }

    message Leaf {
        Expression expr = 1;
    }
    message Branch {
        message SingleConstructorClause {
            oneof kind {
                Tuple tuple = 1;
                Class class = 2;
            }
            ElimTree elim_tree = 3;

            message Tuple {
                int32 length = 1;
            }

            message Class {
                int32 class_ref = 1;
                Sort sort = 2;
                repeated int32 field = 3;
            }
        }
        map<int32, ElimTree> clauses = 1;
        ElimTree null_clause = 2;
        SingleConstructorClause single_clause = 5;
    }
}
