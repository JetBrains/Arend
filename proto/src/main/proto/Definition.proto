syntax = "proto3";

package arend.compiled;
option java_package = "org.arend.module.serialization";
option java_outer_classname = "DefinitionProtos";

import "Expression.proto";
import "Level.proto";


message Definition {
    oneof definition_data {
        ClassData class = 1;
        DataData data = 2;
        FunctionData function = 3;
        DConstructorData constructor = 4;
    }
    UniverseKind universe_kind = 6;
    map<string, bytes> user_data = 7;

    message ClassifyingFields {
        repeated int32 field_ref = 1;
    }
    message ClassData {
        repeated int32 super_class_ref = 1;
        repeated Field personal_field = 2;
        repeated int32 field_ref = 3;
        map<int32, Expression.Abs> implementations = 4;
        int32 coercing_field_ref = 5;
        Sort sort = 6;
        bool is_record = 7;
        CoerceData coerce_data = 8;
        repeated int32 good_field = 9;
        repeated int32 type_class_field = 10;
        repeated ClassParametersLevel parameters_level = 11;
        map<int32, Expression.Pi> overridden_field = 12;
        int32 squasher = 13;

        message Field {
            Referable referable = 1;
            Expression.Pi type = 2;
            Expression type_level = 3;
            int32 number_of_parameters = 4;
            bool isExplicit = 6;
            bool isParameter = 7;
            bool isProperty = 8;
            bool isHideable = 9;
            bool isCovariant = 10;
            UniverseKind universe_kind = 11;
            map<string, bytes> user_data = 12;
        }
    }
    message ParametersLevel {
        bool hasParameters = 1;
        repeated Telescope parameter = 2;
        int32 level = 3;
    }
    message ClassParametersLevel {
        ParametersLevel parameters_level = 1;
        repeated int32 field = 2;
        bool is_strict = 3;
        repeated ClassExtSig class_ext_sig = 4;

        message ClassExtSig {
            int32 class_def = 1;
            repeated int32 field = 2;
        }
    }
    message DataData {
        repeated Telescope param = 1;
        repeated int32 parameters_typechecking_order = 2;
        repeated bool good_this_parameters = 3;
        repeated TypeClassParameterKind type_class_parameters = 4;
        repeated int32 recursive_definition = 14;
        Sort sort = 5;
        repeated Constructor constructor = 6;
        int32 truncated_level = 15;
        bool is_squashed = 8;
        int32 squasher = 10;
        repeated bool covariant_parameter = 11;
        CoerceData coerce_data = 12;
        repeated ParametersLevel parameters_levels = 13;
        bool has_enclosing_class = 16;

        message Constructor {
            Referable referable = 1;
            repeated Pattern pattern = 2;
            repeated Telescope param = 3;
            repeated int32 parameters_typechecking_order = 4;
            repeated bool good_this_parameters = 5;
            repeated TypeClassParameterKind type_class_parameters = 6;
            Body conditions = 8;
            map<string, bytes> user_data = 9;
            int32 recursive_parameter = 10;
        }
    }
    message FunctionData {
        repeated Telescope param = 1;
        repeated int32 parameters_typechecking_order = 2;
        repeated bool good_this_parameters = 3;
        repeated TypeClassParameterKind type_class_parameters = 4;
        repeated int32 recursive_definition = 12;
        Expression type = 5;
        Expression type_level = 6;
        Body body = 7;
        FunctionKind kind = 8;
        int32 visible_parameter = 9;
        repeated ParametersLevel parameters_levels = 10;
        bool body_is_hidden = 11;
        bool has_enclosing_class = 13;
        bool is_instance = 14;
    }
    message DConstructorData {
        FunctionData function = 1;
        int32 number_of_parameters = 2;
        DPattern pattern = 3;
    }

    message DPattern {
        oneof kind {
            int32 binding = 1;
            Constructor constructor = 2;
        }

        message Constructor {
            Expression expression = 1;
            repeated DPattern pattern = 2;
        }
    }

    enum FunctionKind {
        FUNC = 0;
        SFUNC = 1;
        LEMMA = 2;
        INSTANCE = 3;
    }

    enum TypeClassParameterKind {
        YES = 0;
        NO = 1;
        ONLY_LOCAL = 3;
    }

    message CoerceData {
        message Element {
            int32 classifying_def = 1;
            repeated int32 coercing_def = 2;
        }
        repeated Element coerce_from = 1;
        repeated Element coerce_to = 2;
    }
}

message Referable {
    string name = 1;
    Precedence precedence = 2;
    int32 index = 3;
}

message Precedence {
    Assoc assoc = 1;
    int32 priority = 2;
    bool infix = 3;

    enum Assoc {
        LEFT = 0;
        RIGHT = 1;
        NON_ASSOC = 2;
    }
}

message Body {
    oneof kind {
        ElimBody elim_body = 1;
        IntervalElim interval_elim = 2;
        Expression expression = 3;
    }

    message ExpressionPair {
        Expression left = 1;
        Expression right = 2;
    }
    message IntervalElim {
        repeated ExpressionPair case = 1;
        ElimBody otherwise = 2;
    }
}
