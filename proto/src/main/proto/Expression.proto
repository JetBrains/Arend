syntax = "proto3";

package arend.compiled;
option java_package = "org.arend.module.serialization";
option java_outer_classname = "ExpressionProtos";

import "Level.proto";


message Expression {
    oneof kind {
        App app = 1;
        ClassCall class_call = 2;
        ConCall con_call = 3;
        DataCall data_call = 4;
        Error error = 5;
        FieldCall field_call = 6;
        FunCall fun_call = 7;
        Lam lam = 8;
        Let let = 9;
        Case case = 10;
        New new = 11;
        Pi pi = 12;
        Proj proj = 13;
        Reference reference = 14;
        Sigma sigma = 15;
        Tuple tuple = 16;
        Universe universe = 17;
        SmallInteger small_integer = 18;
        BigInteger big_integer = 19;
        PEval pEval = 20;
    }

    message Abs {
        TypedBinding binding = 1;
        Expression expression = 2;
    }
    message App {
        Expression function = 1;
        Expression argument = 2;
        bool is_explicit = 3;
    }
    message ClassCall {
        int32 class_ref = 1;
        Level pLevel = 2;
        Level hLevel = 3;
        map<int32, Expression> field_set = 4;
        Sort sort = 5;
        UniverseKind universe_kind = 6;
    }
    message ConCall {
        int32 constructor_ref = 1;
        Level pLevel = 2;
        Level hLevel = 3;
        repeated Expression datatype_argument = 4;
        repeated Expression argument = 5;
    }
    message DataCall {
        int32 data_ref = 1;
        Level pLevel = 2;
        Level hLevel = 3;
        repeated Expression argument = 4;
    }
    message Error {
        Expression expression = 1;
        bool is_goal = 2;
        bool use_expression = 3;
    }
    message FieldCall {
        int32 field_ref = 1;
        Level pLevel = 2;
        Level hLevel = 3;
        Expression expression = 4;
    }
    message FunCall {
        int32 fun_ref = 1;
        Level pLevel = 2;
        Level hLevel = 3;
        repeated Expression argument = 4;
    }
    message Lam {
        Sort resultSort = 1;
        Telescope param = 2;
        Expression body = 3;
    }
    message Let {
        bool is_strict = 1;
        repeated Clause clause = 2;
        Pattern pattern = 3;
        Expression expression = 4;

        message Clause {
            string name = 1;
            Pattern pattern = 2;
            Expression expression = 3;
        }

        message Pattern {
            enum Kind {
                NAME = 0;
                TUPLE = 1;
                RECORD = 2;
            }
            Kind kind = 1;
            string name = 2;
            repeated int32 field = 3;
            repeated Pattern pattern = 4;
        }
    }
    message Case {
        bool isSFunc = 1;
        ElimBody elim_body = 2;
        repeated Telescope param = 3;
        Expression result_type = 4;
        Expression result_type_level = 5;
        repeated Expression argument = 6;
    }
    message PEval {
        Expression expression = 1;
    }
    message New {
        ClassCall class_call = 1;
        Expression renew = 2;
    }
    message Pi {
        Sort resultSort = 1;
        Telescope param = 2;
        Expression codomain = 3;
    }
    message Proj {
        Expression expression = 1;
        int32 field = 2;
    }
    message Reference {
        int32 binding_ref = 1;
    }
    message Sigma {
        Level pLevel = 1;
        Level hLevel = 2;
        repeated Telescope param = 3;
    }
    message Tuple {
        repeated Expression field = 1;
        Sigma type = 2;
    }
    message Universe {
        Sort sort = 1;
    }
    message SmallInteger {
        int32 value = 1;
    }
    message BigInteger {
        bytes value = 1;
    }
}

enum UniverseKind {
    NO_UNIVERSES = 0;
    ONLY_COVARIANT = 1;
    WITH_UNIVERSES = 2;
}

message Type {
    Expression expr = 1;
    Sort sort = 2;
}

message SingleParameter {
    string name = 1;
    bool is_not_explicit = 2;
    Type type = 3;
    bool is_hidden = 4;
}

message Telescope {
    repeated string name = 1;
    bool is_not_explicit = 2;
    Type type = 3;
    bool is_hidden = 4;
}

message TypedBinding {
    string name = 1;
    Expression type = 2;
}

message Pattern {
    oneof kind {
        Binding binding = 1;
        ExpressionConstructor expression_constructor = 2;
        Constructor constructor = 3;
        Empty empty = 4;
    }

    message Binding {
        SingleParameter var = 1;
    }
    message ExpressionConstructor {
        Expression expression = 1;
        repeated Pattern pattern = 2;
    }
    message Constructor {
        int32 definition = 1;
        repeated Pattern pattern = 2;
    }
    message Empty {
    }
}

message ElimClause {
    repeated Pattern pattern = 1;
    Expression expression = 2;
}

message ElimTree {
    int32 skip = 1;
    oneof kind {
        Leaf leaf = 2;
        Branch branch = 3;
    }

    message Leaf {
        repeated int32 index = 1;
        bool has_indices = 2;
        int32 clause_index = 3;
    }

    message Branch {
        message SingleConstructorClause {
            oneof kind {
                Tuple tuple = 1;
                Class class = 2;
                Idp idp = 3;
            }
            ElimTree elim_tree = 4;

            message Tuple {
                int32 length = 1;
            }

            message Class {
                int32 class_ref = 1;
                Sort sort = 2;
                repeated int32 field = 3;
            }

            message Idp {
            }
        }

        map<int32, ElimTree> clauses = 1;
        SingleConstructorClause single_clause = 2;
        bool keep_con_call = 3;
    }
}

message ElimBody {
    repeated ElimClause clause = 1;
    ElimTree elim_tree = 2;
}
